package OctopusConsortium.NhsdWebservices;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.5.1
 * 2013-05-31T09:42:52.301+01:00
 * Generated source version: 2.5.1
 * 
 */
@WebServiceClient(name = "NHSDWebServices", 
					//wsdlLocation = "https://services.nhsdirect.nhs.uk/PreviewWebServices_v1_2/NHSDWebServices.asmx?WSDL",
					wsdlLocation = "classpath:schemas/nhsd/webservices/NHSDWebServices.xml",
                  targetNamespace = "http://services.nhsdirect.nhs.uk/") 
public class NHSDWebServices extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://services.nhsdirect.nhs.uk/", "NHSDWebServices");
    public final static QName NHSDWebServicesSoap = new QName("http://services.nhsdirect.nhs.uk/", "NHSDWebServicesSoap");
    public final static QName NHSDWebServicesSoap12 = new QName("http://services.nhsdirect.nhs.uk/", "NHSDWebServicesSoap12");
    static {
       /* URL url = null;
        try {
            url = new URL("http://services.nhsdirect.nhs.uk/PreviewWebServices_v1_2/NHSDWebServices.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(NHSDWebServices.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://services.nhsdirect.nhs.uk/PreviewWebServices_v1_2/NHSDWebServices.asmx?WSDL");
        }*/
        URL url = null;    
		url = NHSDWebServices.class.getClassLoader().getResource("schemas/nhsd/webservices/NHSDWebServices.xml");   
        WSDL_LOCATION = url;
    }

    public NHSDWebServices(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public NHSDWebServices(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public NHSDWebServices() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public NHSDWebServices(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public NHSDWebServices(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public NHSDWebServices(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns NHSDWebServicesSoap
     */
    @WebEndpoint(name = "NHSDWebServicesSoap")
    public NHSDWebServicesSoap getNHSDWebServicesSoap() {
        return super.getPort(NHSDWebServicesSoap, NHSDWebServicesSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NHSDWebServicesSoap
     */
    @WebEndpoint(name = "NHSDWebServicesSoap")
    public NHSDWebServicesSoap getNHSDWebServicesSoap(WebServiceFeature... features) {
        return super.getPort(NHSDWebServicesSoap, NHSDWebServicesSoap.class, features);
    }
    /**
     *
     * @return
     *     returns NHSDWebServicesSoap
     */
    @WebEndpoint(name = "NHSDWebServicesSoap12")
    public NHSDWebServicesSoap getNHSDWebServicesSoap12() {
        return super.getPort(NHSDWebServicesSoap12, NHSDWebServicesSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NHSDWebServicesSoap
     */
    @WebEndpoint(name = "NHSDWebServicesSoap12")
    public NHSDWebServicesSoap getNHSDWebServicesSoap12(WebServiceFeature... features) {
        return super.getPort(NHSDWebServicesSoap12, NHSDWebServicesSoap.class, features);
    }

}
