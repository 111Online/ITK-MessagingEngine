//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-257 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.10.26 at 11:11:57 AM BST 
//


package OctopusConsortium.Models.CDA;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;

import org.apache.commons.lang.NotImplementedException;


/**
 * <p>Java class for CDAPersonRelationshipType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="InformantType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Self"/>
 *     &lt;enumeration value="Not_Known"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlEnum
public enum InformantType {
	@XmlEnumValue("Spouse")
	Spouse("01"),
	@XmlEnumValue("Partner")
	Partner("02"),
	@XmlEnumValue("Parent")
	Parent("03"),
	@XmlEnumValue("NextOfKin")
	NextOfKin("04"),
	@XmlEnumValue("Guardian")
	Guardian("05"),
	@XmlEnumValue("FosterParent")
	FosterParent("06"),
	@XmlEnumValue("StepParent")
	StepParent("07"),
	@XmlEnumValue("PolygamousPartner")
	PolygamousPartner("08"),
	@XmlEnumValue("Child")
	Child("09"),
	@XmlEnumValue("Dependant")
	Dependant("10"),
	@XmlEnumValue("NonDependant")
	NonDependant("11"),
	@XmlEnumValue("Mother")
	Mother("12"),
	@XmlEnumValue("Father")
	Father("13"),
	@XmlEnumValue("Sister")
	Sister("14"),
	@XmlEnumValue("Brother")
	Brother("15"),
	@XmlEnumValue("Relative")
	Relative("16"),
	@XmlEnumValue("Proxy_Contact")
	Proxy_Contact("17"),
	@XmlEnumValue("Proxy_Communication")
	Proxy_Communication("18"),
	@XmlEnumValue("Proxy_ContactAndCommunication")
	Proxy_ContactAndCommunication("19"),
	@XmlEnumValue("Carer")
	Carer("20"),	
    @XmlEnumValue("Self")
    Self("21"),
    @XmlEnumValue("Wife")
	Wife("22"),
	@XmlEnumValue("Husband")
	Husband("23"),
	@XmlEnumValue("MaternalGrandFather")
	MaternalGrandFather("24"),
	@XmlEnumValue("MaternalGrandMother")
	MaternalGrandMother("25"),
	@XmlEnumValue("PaternalGrandFather")
	PaternalGrandFather("26"),
	@XmlEnumValue("PaternalGrandMother")
	PaternalGrandMother("27"),
	@XmlEnumValue("GrandSon")
	GrandSon("28"),
	@XmlEnumValue("GrandDaughter")
	GrandDaughter("29"),
	@XmlEnumValue("Aunt")
	Aunt("30"),
	@XmlEnumValue("Uncle")
	Uncle("31"),
	@XmlEnumValue("Niece")
	Niece("32"),
	@XmlEnumValue("Nephew")
	Nephew("33"),
	@XmlEnumValue("StepMother")
	StepMother("34"),
	@XmlEnumValue("StepFather")
	StepFather("35"),
	@XmlEnumValue("StepSon")
	StepSon("36"),
	@XmlEnumValue("StepDaughter")
	StepDaughter("37"),
	@XmlEnumValue("CivilPartner")
	CivilPartner("38"),
	@XmlEnumValue("ExWife")
	ExWife("39"),
	@XmlEnumValue("ExHusband")
	ExHusband("40"),
	@XmlEnumValue("ExCivilPartner")
	ExCivilPartner("41"),
	@XmlEnumValue("Son")
	Son("42"),
	@XmlEnumValue("Daughter")
	Daughter("43"),
	@XmlEnumValue("Grandparent")
	Grandparent("44"),
	@XmlEnumValue("Grandchild")
	Grandchild("45"),
	@XmlEnumValue("Friend")
	Friend("46"),
	@XmlEnumValue("Neighbour")
	Neighbour("47"),
	@XmlEnumValue("WorkColleague")
	WorkColleague("48"),
	@XmlEnumValue("PersonWithParentalResponsibility")
	PersonWithParentalResponsibility("49"),
	@XmlEnumValue("InformalPartner")
	InformalPartner("50"),
	@XmlEnumValue("NonRelativeLivedWithForAtLeastFiveYears")
	NonRelativeLivedWithForAtLeastFiveYears("51"),	
    @XmlEnumValue("NotKnown")
    NotKnown("98"),
    @XmlEnumValue("NotSpecified")
	NotSpecified("99");
	
    private final String value;

    InformantType(String v) {
        value = v;
    }

    public String getCode() {
    	   return value;
    	 }

    public static InformantType fromValue(String v) {
        for (InformantType c: InformantType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }
    
    @Override
    public String toString() {   
    	
    	switch (this){
		case Aunt:
			return "Aunt";	
		case Brother:
			return "Brother";	
		case Carer:
			return "Carer";
		case Child:
			return "";
		case CivilPartner:
			return "Civil Partner";
		case Daughter:
			return "Daughter";
		case Dependant:
			return "Dependant";
		case ExCivilPartner:
			return "Ex-Civil Partner";
		case ExHusband:
			return "Ex-Husband";
		case ExWife:
			return "Ex-Wife";
		case Father:
			return "Father";
		case FosterParent:
			return "Foster Parent";
		case Friend:
			return "Friend";
		case GrandDaughter:
			return "Grand-Daughter";
		case GrandSon:
			return "Grand-Son";
		case Grandchild:
			return "Grandchild";
		case Grandparent:
			return "Grandparent";
		case Guardian:
			return "Guardian";
		case Husband:
			return "Husband";
		case InformalPartner:
			return "Informal Partner";
		case MaternalGrandFather:
			return "Maternal Grand-Father";
		case MaternalGrandMother:
			return "Maternal Grand-Mother";
		case Mother:
			return "Mother";
		case Neighbour:
			return "Neighbour";
		case Nephew:
			return "Nephew";
		case NextOfKin:
			return "Next of kin";			
		case Niece:
			return "Niece";
		case NonDependant:
			return "Non-dependant";
		case NonRelativeLivedWithForAtLeastFiveYears:
			return "Non-relative lived with for at least five years";
		case NotKnown:
			return "Not Known";
		case NotSpecified:
			return "Not Specified";
		case Parent:
			return "Parent";
		case Partner:
			return "Partner";
		case PaternalGrandFather:
			return "Paternal Grand-Father";
		case PaternalGrandMother:
			return "Paternal Grand-Mother";
		case PersonWithParentalResponsibility:
			return "Person with parental responsibility";
		case PolygamousPartner:
			return "Polygamous partner";
		case Proxy_Communication:
			return "Proxy - Communication";
		case Proxy_Contact:
			return "Proxy - Contact";
		case Proxy_ContactAndCommunication:
			return "Proxy - Contact and Communication";
		case Relative:
			return "Relative";
		case Self:
			return "Self";
		case Sister:
			return "Sister";
		case Son:
			return "Son";
		case Spouse:
			return "Spouse";
		case StepDaughter:
			return "Step-Daughter";
		case StepFather:
			return "Step-Father";
		case StepMother:
			return "Step-Mother";
		case StepParent:
			return "Step-Parent";
		case StepSon:
			return "Step-Son";
		case Uncle:
			return "Uncle";
		case Wife:
			return "Wife";
		case WorkColleague:
			return "Work Colleague";		
		default:
			throw new NotImplementedException("no string return found for enum value");  	
    	}
    }

}
